{"hash":"87002c5fa157b6e786d19711f6bffff4b0d9c799","data":{"data":{"id":"12","title":"前端工程化5：Gulp最基本配置，10分钟看完就会","user":{"id":1,"username":"ymcdhr","name":"Tony Young","image":{"url":"/uploads/logo_521b3eebb2.jpg"}},"content":"## Gulp的基本使用\n\n#### 安装\n```js\n> npm install gulp -g\n```\n\ngulp的配置文件：gulpfile.js\ngulp4.0以后不再推荐使用 gulp.task() ，而是推荐使用 exports 的方式定义任务：\n```js\nexports.foo = done =>{\n\n  done() //标记任务完成\n}\n```\n\n#### 组合配置\n```js\nconst { series, parallel } = require('gulp')\n\nconst task1 = done => {\n  setTimeout(() => {\n    console.log('task1 working~')\n    done()\n  }, 1000)\n}\n\nconst task2 = done => {\n  setTimeout(() => {\n    console.log('task2 working~')\n    done()\n  }, 1000)  \n}\n\nconst task3 = done => {\n  setTimeout(() => {\n    console.log('task3 working~')\n    done()\n  }, 1000)  \n}\n\n// 让多个任务按照顺序依次执行\nexports.foo = series(task1, task2, task3)\n\n// 让多个任务同时执行\nexports.bar = parallel(task1, task2, task3)\n```\n\n#### 异步任务\n```js\nconst fs = require('fs')\n\nexports.callback = done => {\n  console.log('callback task')\n  done()\n}\n\nexports.callback_error = done => {\n  console.log('callback task')\n  done(new Error('task failed'))\n}\n\nexports.promise = () => {\n  console.log('promise task')\n  return Promise.resolve()\n}\n\nexports.promise_error = () => {\n  console.log('promise task')\n  return Promise.reject(new Error('task failed'))\n}\n\nconst timeout = time => {\n  return new Promise(resolve => {\n    setTimeout(resolve, time)\n  })\n}\n\n// Nodejs版本在8以上可以使用async、await\nexports.async = async () => {\n  await timeout(1000)\n  console.log('async task')\n}\n\n// 最常用的一种，读写文件\nexports.stream = () => {\n  const read = fs.createReadStream('yarn.lock')\n  const write = fs.createWriteStream('a.txt')\n  read.pipe(write) // 导入文件流\n  return read // 结束任务\n}\n\n// exports.stream = done => {\n//   const read = fs.createReadStream('yarn.lock')\n//   const write = fs.createWriteStream('a.txt')\n//   read.pipe(write)\n//   read.on('end', () => { // 结束任务\n//     done()\n//   })\n// }\n\n```\n\n#### 构建过程核心工作原理\n输入 => 加工 => 输出\n\n```js\nconst fs = require('fs')\nconst { Transform } = require('stream')\n\nexports.default = () => {\n  // 文件读取流\n  const readStream = fs.createReadStream('normalize.css')\n\n  // 文件写入流\n  const writeStream = fs.createWriteStream('normalize.min.css')\n\n  // 文件转换流\n  const transformStream = new Transform({\n    // 核心转换过程\n    transform: (chunk, encoding, callback) => {\n      const input = chunk.toString()\n      const output = input.replace(/\\s+/g, '').replace(/\\/\\*.+?\\*\\//g, '')\n      callback(null, output)\n    }\n  })\n\n  return readStream\n    .pipe(transformStream) // 转换\n    .pipe(writeStream) // 写入\n}\n\n```\n\n#### 文件操作API\n```js\nconst { src, dest } = require('gulp')\nconst cleanCSS = require('gulp-clean-css')\nconst rename = require('gulp-rename')\n\nexports.default = () => {\n  return src('src/*.css')\n    .pipe(cleanCSS()) // 压缩css代码插件\n    .pipe(rename({ extname: '.min.css' })) // 重命名文件插件\n    .pipe(dest('dist'))\n}\n\n```\n\n\n## Gulp基础配置\n\n#### 准备工作\n\n- 安装gulp工具：npm install gulp -g\n- 创建gulp配置：在项目根目录下新建文件gulpfile.js，用于写gulp的配置文件；\n\n\n#### Task：清空文件\n- 功能：清空构件生产的所有文件\n- 依赖：del\n\n```js\nconst clean = () => {\n    return del(['dist','temp'])\n}\n```\n\n#### Task：css文件处理，sass文件转换\n- 功能：将sass文件转换成css文件写入指定目录\n- 依赖：gulp-sass\n\n```js\nconst style = () => {\n    return src('src/assets/styles/*.scss',{ base: 'src'}) // base指定基础目录，转换后dist目录才会和src保持一样的结构\n        .pipe(plugins.sass({ outputStyle: 'expanded'})) // { outputStyle: 'expanded'} 参数可以指定结束括号格式化    \n        .pipe(dest('temp'))\n}\n```\n\n#### Task：js文件处理，编译es6+为es5\n- 功能：使用babel插件将js文件里的es6+代码转换为es5\n- 依赖：\n> 1、gulp-babel => babel工具：转换平台，不作具体的工作\n> 2、@babel/core => babel核心转换模块：完成语言转换工作\n> 3、@babel/preset-env => babel的转换插件：指定babel对应的转换内容；比如env包含es6+全部新特性，将其转换到es5\n\n```js\nconst script = () => {\n    return src('src/assets/scripts/*.js',{ base: 'src'})\n        .pipe(plugins.babel({ \n            presets: ['@babel/preset-env'] // 编译es6，必须传递参数preset-env，否则转换失效(babel配置可以单独放到.babelrc文件)\n        }))\n        .pipe(dest('temp'))\n}\n```\n\n#### Task：html文件的转换，处理swig模板\n- 功能：将指定的swig模板转换为html文件，注意：\n> 1、gulp配置的时候可以将数据以对象的形式传递数据给模板引擎；通常将数据定义在文件中：pages.config.js\n> 2、swig模板的缓存配置可以关闭，防止浏览器在热更新时没有实时刷新\n- 依赖：gulp-swig\n\n```js\nconst page = () => {\n    return src('src/**/*.html',{ base: 'src'}) // 其中/**/*.html表示在src目录下任意子目录下的匹配\n        .pipe(plugins.swig({ data: config.data, defaults: { cache: false } }))   //转换模板页，将data数据传递给模板使用，cache：swig缓存设置，否则热更新时可能不立即生效\n        .pipe(dest('temp'))\n}\n```\n\n#### Task：图片压缩，减少图片体积\n- 功能：压缩图片体积\n- 依赖：gulp-imagemin\n\n```js\nconst image = () => {\n    return src('src/assets/images/**',{ base: 'src'})\n        .pipe(plugins.imagemin())\n        .pipe(dest('dist'))\n}\n```\n\n\n#### Task：字体文件压缩，减少字体文件体积\n- 功能：压缩字体体积\n- 依赖：gulp-imagemin\n\n```js\nconst font = () => {\n    return src('src/assets/fonts/**', { base: 'src' })\n      .pipe(plugins.imagemin())\n      .pipe(dest('dist'))\n}\n```\n\n#### Task：其它文件移动，例如视频\n- 功能：移动其余所有文件到指定目录\n- 依赖：无\n\n```js\nconst extra = () => {\n    return src('public/**', { base: 'public' })\n        .pipe(dest('dist'))\n}\n```\n\n\n\n## Gulp的本地服务/热更新/文件合并与压缩\n#### Task：本地Web服务与热更新\n- 功能1：本地Web服务\n> 1、使用插件browser-sync来启动本地Web服务，并支持一些配置（具体参考示例代码）\n> 2、重要配置：根路径baseDir，配置后gulp从指定的路径按顺序查找\n> 3、重要配置：路径查找路由routes，例如：/node_modules映射到node_modules\n\n- 功能2：浏览器的热更新\n> 在browser-sync插件的配置中使用files: 'temp/**'监视目录下所有文件\n\n- 功能3：源文件的热更新\n> 1、监视源文件，如果源文件修改后立即重新构建\n> 2、开发模式下：监视的范围不包括图片、字体和其它文件，将他们的访问路径指定为src路径下可提升构建效率\n\n- 依赖：browser-sync\n\n```js\nconst serve = () => {\n    // 监视src文件，重新构建代码\n    watch('src/assets/styles/*.scss', style)\n    watch('src/assets/scripts/*.js', script)\n    watch('src/*.html', page)\n\n    // 图片、字体在开发阶段没有必要重新执行构建任务；所以让gulp从源文件src、public里面查找  \n    // 图片、字体等文件发生变化后，bs.reload 更新浏览器\n    watch([\n        'src/assets/images/**',\n        'src/assets/fonts/**',\n        'public/**'\n    ], bs.reload)\n    \n    // 配置web服务器，监视dist\n    bs.init({\n        notify: false, // 右上角提示\n        port: 2080, // 服务的端口，默认300\n        // open: false, // 自动打开浏览器\n        files: 'temp/**', // 热更新，dist下的所有文件变化时，同步更新浏览器\n        server: {\n          //服务启动时，首先访问dist根目录；查询路径：dist=>src=>public\n          //因为图片字体等文件没必要热更新重新构建（减少构建时间），所以让gulp从源文件src、public里面查找  \n          baseDir: ['temp', 'src', 'public'], \n          routes: {// 路径查找路由\n            '/node_modules': 'node_modules' //优先级高于baseDir,先查找node_modules目录\n          }\n        }\n    })\n}\n```\n\n#### Task：文件合并与压缩混淆\n- 功能1：文件合并\n> useref插件查询指定路径，然后将对应的文件合并\n- 功能2：文件压缩\n> 1、压缩js\n> 2、压缩css\n> 3、压缩html\n- 依赖：\n> 1、gulp-useref => 查询路径，合并文件\n> 2、gulp-if => 判断条件插件\n> 3、gulp-uglify => 压缩js\n> 4、gulp-clean-css=> 压缩css\n> 5、gulp-htmlmin => 压缩html\n\n```js\nconst useref = () => {\n    return src('temp/*.html', { base: 'temp' })\n        .pipe(plugins.useref({ searchPath: ['temp', '.'] })) //查询路径：dist、.根目录下（node_modules） \n        // html js css压缩代码\n        .pipe(plugins.if(/\\.js$/, plugins.uglify()))\n        .pipe(plugins.if(/\\.css$/, plugins.cleanCss()))\n        .pipe(plugins.if(/\\.html$/, plugins.htmlmin({\n            collapseWhitespace: true, // 折叠空白字符\n            minifyCSS: true, // 自动压缩style里面的css\n            minifyJS: true // 自动压缩script里面的js\n            // 还有删除注释、空属性等配置\n            // ...\n        })))\n        .pipe(dest('dist'))\n}\n```\n\n## Gulp配置构建任务的类别\n#### 如何组合任务？\n1. 使用parallel/series进行组合任务；\n2. 其中parallel是并行执行，series是串行执行\n\n#### Gulp构建任务的类别\n **1. 基础构建：** 只构建css、js、html便于本地测试\n```js\nconst compile = parallel(style, script, page) \n```\n\n **2. 开发模式：** 基础构建 + 启动web服务 + 热更新（图片/字体等文件使用src本地加快构建速度）\n```js\n// 2、开发模式：只构建各种代码，启动web服务，图片/字体等文件使用src本地加快构建速度\nconst develop = series(clean, compile, serve)\n```\n\n **3. 生产模式：** 执行所有任务；包括合并/压缩各种文件，然后将图片/文件也处理了\n```js\nconst build = series(\n    clean, \n    parallel(\n        series(compile, useref), \n        extra, \n        image, \n        font\n    )\n)\n```\n\n## 其它配置，简化配置、提升自定义程度\n#### 1、自动加载全部的plugin\n- 功能：避免引入太多常用插件，直接使用plugins替代；例如：需要将sass替换为plugins.sass变量。\n- 依赖：gulp-load-plugins\n\n```js\n// const sass = require('gulp-sass') // npm install gulp-sass --save-dev\n// ==>\n// 自动加载全部的plugin；例如sass，使用plugins.sass替换即可\nconst loadPlugins = require('gulp-load-plugins') // npm install gulp-load-plugins --save-dev\nconst plugins = loadPlugins() \n```\n\n将原始变量替换为plugins.xxx属性\n```js\n.pipe(sass({ outputStyle: 'expanded'}))\n// ==>\n.pipe(plugins.sass({ outputStyle: 'expanded'}))\n```\n\n#### 2、模板数据可配置\n- 功能：\n> 1、将模板引擎所需要的数据定义在：pages.config.js，在gulpfile.js中使用默认配置\n> 2、gulpfile.js中的所有路径可以使用变量替换，实现更高的自定义程度\n- 依赖：无\n\n```js\nlet config = {\n  // default config\n  build: {\n    src: 'src',\n    dist: 'dist',\n    temp: 'temp',\n    public: 'public',\n    paths: {\n      styles: 'assets/styles/*.scss',\n      scripts: 'assets/scripts/*.js',\n      pages: '*.html',\n      images: 'assets/images/**',\n      fonts: 'assets/fonts/**'\n    }\n  }\n}\n\ntry {\n  const loadConfig = require(`${cwd}/pages.config.js`)\n  config = Object.assign({}, config, loadConfig)\n} catch (e) {}\n```\n\n- 数据文件：pages.config.js\n\n```js\nmodule.exports = {\n  build: {\n    src: 'src',\n    dist: 'release',\n    temp: '.tmp',\n    public: 'public',\n    paths: {\n      styles: 'assets/styles/*.scss',\n      scripts: 'assets/scripts/*.js',\n      pages: '*.html',\n      images: 'assets/images/**',\n      fonts: 'assets/fonts/**'\n    }\n  },\n  data: {\n    menus: [\n      {\n        name: 'Home',\n        icon: 'aperture',\n        link: 'index.html'\n      },\n      ...\n    ],\n    pkg: require('./package.json'),\n    date: new Date()\n  }\n}\n```\n\n\n\n\n\n\n\n## 配置Npm Scripts，启动构建任务：\n\n#### 1、导出任务：在gulpfile.js文件中exports \n```js\nmodule.exports = {\n    clean,\n    build,\n    develop\n}\n```\n#### 2、配置scripts：在文件package.json中配置对应任务执行脚本\n```js\n  \"scripts\": {\n    \"clean\": \"gulp clean\",\n    \"build\": \"gulp build\",\n    \"develop\": \"gulp develop\"\n  },\n```\n\n[特别鸣谢：拉勾教育前端高薪训练营](https://kaiwu.lagou.com/)\n\n\n","published_at":"2021-07-11T18:21:27.186Z","updated_at":"2021-07-12T07:15:26.316Z"}},"context":{}}